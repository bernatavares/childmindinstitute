---

- fail:
    msg="ansible-role-girder only supports Ubuntu Trusty/Xenial and Redhat/CentOS 7."
  when: (ansible_distribution_release != "trusty") and
        (ansible_distribution_release != "xenial") and
        (ansible_os_family == "RedHat" and ansible_distribution_major_version != "7")

- name: Ensure girder base directory exists
  file:
    path: "{{ girder_path }}"
    state: directory
    group: "{{ ansible_user_id }}"
    owner: "{{ ansible_user_id }}"
    mode: 0755
  become: yes
  become_user: root

- name: Check if vagrant path exists
  stat: path=/home/vagrant/girder
  register: check_vagrant_path

- name: Create actual directory for node_modules
  file:
    path: "{{ ansible_user_dir }}/girder_node_modules"
    state: directory
  when: check_vagrant_path.stat.exists

- name: Create virtual directory for node_modules
  file:
    path: "{{ girder_path }}/node_modules"
    state: directory
  when: check_vagrant_path.stat.exists

- name: Bind mount node_modules
  mount:
    src: "{{ ansible_user_dir }}/girder_node_modules"
    path: "{{ girder_path }}/node_modules"
    opts: bind
    fstype: none
    state: mounted
  register: fstab
  become: yes
  become_user: root
  when: check_vagrant_path.stat.exists

- include: npm-RedHat.yml
  when:
    - girder_web
    - ansible_os_family == "RedHat"

- include: npm-Debian.yml
  when:
    - girder_web
    - ansible_os_family == "Debian"

- name: Install virtualenv
  apt:
    name: python-virtualenv
    state: latest
  become: yes
  become_user: root
  when:
    - girder_virtualenv is defined
    - ansible_os_family == "Debian"

- name: Install virtualenv
  yum:
    name: python-virtualenv
    state: latest
  become: yes
  become_user: root
  when:
    - girder_virtualenv is defined
    - ansible_os_family == "RedHat"

- include: girder.yml

- include: pip.yml
  when: girder_virtualenv is not defined
  become: yes
  become_user: root

- include: pip.yml
  when: girder_virtualenv is defined

- include: daemon.yml
  when: girder_daemonize

- name: Build Girder (web)
  command: "{{ girder_install_executable|default('girder-install') }} web {{ girder_web_extra_args }}"
  args:
    chdir: "{{ girder_path }}"
  # ensure that the install is one that uses web assets and
  # the assets are always supposed to be rebuilt, or the files have changed (from git)
  when: girder_web and (girder_always_build_assets or girder_files_updated)
